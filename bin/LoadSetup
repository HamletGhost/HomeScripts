#!/bin/bash
# shortcut to source setup scripts stored in
# ${HOME}/bin/ExtraSetups, ${HOME}/bin/Setups or ${HOME}/bin/${KEY}/setup

ROOT_SCRIPTS_DIR="$(dirname "${BASH_SOURCE:-${HOME}/bin/Setups}")"
if [[ ! -d "$ROOT_SCRIPTS_DIR" ]]; then
	echo "WARNING: script directory '${ROOT_SCRIPTS_DIR}' not found" >&2
fi

function Setup() {
	local Package="$1"
	local Indent="$2" # cosmetic
	local -i Quiet="${3:-0}"

	local SetupScript
	for SetupScript in \
	  "${ROOT_SCRIPTS_DIR}/ExtraSetups/${Package}" \
	  "${ROOT_SCRIPTS_DIR}/Setups/${Package}" \
	  "${ROOT_SCRIPTS_DIR}/${Package}/setup"
	do
		[[ -r "$SetupScript" ]] || continue
		local TargetSetupScript="$SetupScript"
		local SetupDir="$(dirname "$TargetSetupScript")"
		local SetupScriptName="$(basename "$TargetSetupScript")"
		[[ $Quiet -le 0 ]] || echo "${Indent}Setup (${SetupScriptName}) from '${SetupDir}'"
		pushd "$SetupDir" > /dev/null
		shift
		local ReturnCode
		if [[ $Quiet -le 1 ]]; then
			source "./${SetupScriptName}" "$@"
		else
			source "./${SetupScriptName}" "$@" > /dev/null
		fi
		ReturnCode=$?
		popd > /dev/null
		return $ReturnCode
	done
	# fallback on an existing setup (e.g. UPS)
	[[ $Quiet -le 0 ]] && echo "${Indent}setup $@"
	if [[ $Quiet -le 1 ]]; then
		setup "$@"
	else
		setup "$@" > /dev/null
	fi
} # Setup()

