#!/bin/bash
# shortcut to source setup scripts stored in
# ${HOME}/bin/ExtraSetups, ${HOME}/bin/Setups or ${HOME}/bin/${KEY}/setup

function LoadSetup_DetectROOTscriptDir() {
	local Dir="$(dirname -- "${BASH_SOURCE:-${HOME}/bin/Setups}")"
	[[ "${Dir:0:1}" != "/" ]] && Dir="$(pwd)/${Dir}"
	while [[ ! -d "${Dir}/Setups" ]]; do
		Dir="$(dirname "$Dir")"
		[[ "$Dir" == "/" ]] && return 3
	done
	echo "$Dir"
	return 0
} # LoadSetup_DetectROOTscriptDir()


ROOT_SCRIPTS_DIR="$(LoadSetup_DetectROOTscriptDir)"
if [[ ! -d "${ROOT_SCRIPTS_DIR}/Setups" ]]; then
	ERROR "${BASH_SOURCE}: Base script directory not found!"
fi
unset -f LoadSetup_DetectROOTscriptDir

function Setup() {
	OPTIND=1
	local Option
	local Indent=''
	local Mode=''
	local -i QuietLevel=1
	while getopts 'i:nq:Qh?i-' Option ; do
		case "$Option" in
			( 'i' ) Indent="$OPTARG" ;;
			( 'n' ) Mode='query' ;;
			( 'q' ) QuietLevel="$OPTARG" ;;
			( 'Q' ) QuietLevel=0 ;;
			( '-' ) let ++OPTIND ; break ;;
			( 'h' | '?' ) Mode='help' ;;
		esac
	done
	# remove the options from the positional arguments:
	shift $((OPTIND - 1))
	
	if [[ "$Mode" == 'help' ]]; then
		cat <<-EOH
		
		Runs a setup script.
		
		Usage:  ${FUNCNAME[0]}  [options]  SetupFile
		
		Setup files are searched in the directories under the root script directory:
		 - <ROOT_SCRIPTS_DIR>/ExtraSetups/<SetupFile>   # customized setups
		 - <ROOT_SCRIPTS_DIR>/Setups/<SetupFile>        # distributed setups
		 - <ROOT_SCRIPTS_DIR>/<SetupFile>/setup         # more complex setups
		The directory <ROOT_SCRIPTS_DIR> is determined on startup and it is currently:
		'${ROOT_SCRIPTS_DIR}'
		
		Options:
		    -n
		        query mode: returns a non-zero exit code if setup file was not found
		    -q LEVELS
		        a quietness level passed to the setup scripts; if LEVELS is non-positive,
		        the Setup output is also affected
		    -Q
		        quiet mode: output on screen reduced (equivalent to "-q 0")
		    -i INDENT
		        use INDENT as string for output indentation
		    -h , -?
		        show this usage message
		
		EOH
		return
	fi
	
	local Package="$1"
	shift
	if [[ $# -gt 1 ]]; then
		echo "ERROR (non-fatal): extra arguments in Setup call ($@)" >&2
	fi

	local SetupScript=''
	local CandidateScript
	for CandidateScript in \
	  "${ROOT_SCRIPTS_DIR}/ExtraSetups/${Package}" \
	  "${ROOT_SCRIPTS_DIR}/Setups/${Package}" \
	  "${ROOT_SCRIPTS_DIR}/${Package}/setup"
	do
		[[ -r "$CandidateScript" ]] || continue
		SetupScript="$CandidateScript"
	done

	if [[ -n "$SetupScript"	]]; then
		local TargetSetupScript="$SetupScript"
		local SetupDir="$(dirname "$TargetSetupScript")"
		local SetupScriptName="$(basename "$TargetSetupScript")"
	fi
	if [[ $Quiet -gt 0 ]]; then
		if [[ -n "$SetupScript" ]]; then
			echo "${Indent}Setup (${SetupScriptName}) from '${SetupDir}'"
		else
			echo "${Indent}Setup for '${Package}' not found!" >&2
		fi
	fi
	if [[ "$Mode" == "query" ]]; then
		[[ -r "$SetupScript" ]]
		return	
	fi
	
	# we have the script, and we want to source it!
	if [[ -r "$SetupScript" ]]; then
		local CWD="$(pwd)"
		cd "$SetupDir"
		shift
		local ReturnCode
		if [[ $Quiet -gt 0 ]]; then
			source "./${SetupScriptName}" "$@"
		else
			source "./${SetupScriptName}" "$@" > /dev/null
		fi
		ReturnCode=$?
		[[ "$(pwd)" == "$SetupDir" ]] && cd "$CWD"
		return $ReturnCode
	else
		# fallback on an existing setup (e.g. UPS)
		[[ $Quiet -gt 0 ]] && echo "${Indent}setup $@"
		if [[ $Quiet -gt 0 ]]; then
			setup "$Package" "$@"
		else
			setup "$Package" "$@" > /dev/null
		fi
	fi
} # Setup()


function _BashCompletion_Setup() {
	# auto-completion of the thing being set up;
	# choice among the candidates in the blessed directories
	
	# Pointer to current completion word.
	# By convention, it's named "cur" but this isn't strictly necessary.
	local cur="${COMP_WORDS[COMP_CWORD]}"
	
	COMPREPLY=()   # Array variable storing the possible completions.
	
	local SetupScript
	for SetupScript in \
	  "${ROOT_SCRIPTS_DIR}/ExtraSetups/"* \
	  "${ROOT_SCRIPTS_DIR}/Setups/"* \
	  "${ROOT_SCRIPTS_DIR}/"*
	do
		local Candidate
		if [[ -f "$SetupScript" ]]; then
			Candidate="$(basename "$SetupScript")"
		elif [[ -f "${SetupScript}/setup" ]]; then
			Candidate="$(basename "$(dirname "$SetupScript")")"
		else
			continue
		fi
		[[ "${Candidate#${cur}}" == "$Candidate" ]] && continue
		COMPREPLY=( "${COMPREPLY[@]}" "$Candidate" )
	done
	
	return 0
} # _BashCompletion_Setup()

complete -F _BashCompletion_Setup Setup
